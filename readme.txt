Battleship.py by: Javier Ernesto Moran Lemus and Frederik Roenn StensaethThe game we decided to make is the classic board game called Battleship. In this game, two players play against each other and shoot missiles, until one of them has sunk all of the other player's ships. In our program, you are given one ship of size two, two ships of size three, one ship of size four and one ship of size five (just as the original game). You are allowed to place them wherever you want on the board, and in what ever configuration you want, as long as you are not cheating. By cheating, we mean, you cannot stack ships. We have coded our program so that you can not, even if you tried, place ships on top of each other. The computer in our program started by just making random shots around the board, even if it made hits. This resulted in that it was almost impossible to beat the human player. Now, the computer knows that if it makes a hit, it should shoot around that space. The computer might win some times, but it is still more likely that the human player wins (assuming that the human player follows some sort of strategy).Our program is mostly ran by buttons. At the beginning of the program, each player is awarded a grid, this 10x10 grid creates 100 buttons, in which it is possible to place ships and get shot at by your opponent. The ships, for graphical purposes are represented by black ovals. This is only done so that the player knows where he is placing/ has placed his ships. The ovals are then erased and all that is left are the two boards. The computer places its ship with no strategy, it simply places them on random spaces on the board. However, the computers ships are never drawn, so that the human player does not know where these are being placed. The game is now played, and the players take turns shooting and hopefully hitting the other player’s ships. The computer starts, as we feel that the human should have a slight advantage versus the computer in terms of intelligence.We have coded our Python module such that we set up an interface, and the interface calls all the classes and methods that it needs. We feel that this is a better approach, as it is cleaner and easier to follow. Furthermore, the reasoning being using buttons is that we already had a button class, and using this would save us some typing (perhaps 15 lines) and they are easy to manipulate. Our game contains 5 classes (not counting RectangleButton): Sea_spaces (sets up the board), Ship (creates the ships), Player (creates human player), Computer (creates computer player), and BattleshipGame (interface). These classes make up every component of the game and nothing more is needed.As of now, our program runs smoothly, without any bugs. We have implemented all the rules of Battleship. Our version of Battleship only allows for human vs. computer gameplay, as creating a human vs. human gameplay would not add anything in terms of coding.To run the game, have graphics.py, rectangle button.py, and BattleshipRe.py in the same directory and feed Terminal ‘python BattleshipRe.py’ (you have to be located in the directory). You place the ships by pressing the button you want the ship to start at and press the button you want the ship to end at. Distance must correspond to ship size. You cannot replace a ship. If you decide you want to place the ship somewhere else before having pressed the end point, click a button that does not grant the correct distance, and start over.Enjoy the game!		03.17.14		Page 1 of 1